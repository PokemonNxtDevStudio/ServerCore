package packets;

option java_package = "com.pokemonnxt.packets";
option java_outer_classname = "Communications";
option optimize_for = SPEED;

message Packet{
 required Header header= 1;
 required Payload payload = 2;
}
enum PacketType {
    GAME = 0;
   	LOGIN = 1;
	PLAYER_DATA = 2;
	ACTION_FAILED = 3;
	CHAT = 4;
  }
message Header {
  required int32 id = 1;        // Unique ID number for this person.
  optional PacketType type = 2 [default = LOGIN];
 }
message Payload {
 optional LoginPayload loginpayload=1;
  optional PlayerDataPayload playerdatapayload=2;
 optional TrainerDataPayload trainerdatapayload=3;
 optional ActionFailedPayload actionfailedpayload=4;
 optional ChatMsgPayload chatmsgpayload=5;
 }




message LoginPayload{
required string username = 1;        //Username
  required string password = 2;       //Password
 required string email  =3;
}
message PlayerDataPayload{
	required int32 pid = 1;      // The Player's ID this packet is describing
	optional int32 trainer = 2;  // The Trainer this player is associated to (0 for none, otherwise the Trainer ID)
	optional string server = 3;  // The specific ID of the server they're currently on
	repeated int32 assets = 4; // A list of assets this player owns
}
message TrainerDataPayload{
	required int32 gtid = 1; 		// The Trainer's ID this packet is describing
	optional LOCATION location = 2; // Where the player is last time they updated the server
	optional string username = 3; 	// The username of the player that this packet is describing
	repeated POKEMON party = 4; 	// What pokémon they have
}
message ActionFailedPayload{
	required ERROR_TYPES error = 1 [default = UNKNOWN_ERROR];
	optional int32 id = 2; // If a GTID, GPID or any other ID was involved in this error, put it here
	optional string message = 3; // Any further details on the message
	optional int32 errorID = 4;  // Server-side error ID, used for reporting.
}
message ChatMsgPayload{
	required CHAT_TYPES type = 1;	// What the target of the message is
	required string msg = 2; 		// what the message is
	optional string username = 3; 	// who the message is to/from [Only needed for private messages. Specify username OR gtid]
	optional int32 gtid = 4; 	// who the message is to/from [Only needed for private messages. Specify username OR gtid]
}

message OwnershipPayload{
	required CHAT_TYPES type = 1;	// What the target of the message is
	required string msg = 2; 		// what the message is
	optional string username = 3; 	// who the message is to/from [Only needed for private messages. Specify username OR gtid]
	optional int32 gtid = 4; 	// who the message is to/from [Only needed for private messages. Specify username OR gtid]
}
message SpawnRequestPayload{
	required int32 type = 1;		// What the target of the message is
	required string msg = 2; 		// what the message is
}

message DataRequestPayload{
	optional int32 gtid = 1;	// Request information on a real trainer
	optional int32 gpid = 2;	// Request information on a real pokemon
	optional int32 asset = 3;   //
}

/* Motherfucking proto only types fo shizle */

message LOCATION{
	required double X = 1;
	required double Y = 2;
	required double Z = 3;
	optional double Pitch = 4;
	optional double Yaw = 5;
	optional double Roll = 6;
}

message POKEMON{
	required int32 id = 1;
	required int32 dex = 2;
	required ATTACKSET attacks = 3;
	required STATS normalStats = 4;
	required STATS currentStats = 5;
}

message BASE_POKEMON{
	required int32 dex = 1;
	required ATTACKSET attacks = 3;
	required STATS baseStats = 4;
	required STATS currentStats = 5;
}

message STATS{
	required int32 Attack=1;
	required int32 Defense=2;
	required int32 Speed=3;
	required int32 Accuracy=4;
	required int32 SpAttack=5;
	required int32 SpDefense=6;
	required int32 Evasion=7;
	required int32 HP=8;
}
message ATTACKSET{
	required ATTACK slotOne = 1;
	required ATTACK slotTwo = 2;
	required ATTACK slotThree = 3;
	required ATTACK slotFour = 4;
}

message ATTACK{
	required int32 mid = 1;
	required int32 maxPP = 2;
	required int32 currentPP = 3;
}
message MOVE{
	required int32 mid = 1;
	required string Name = 2;
	required POKEMON_TYPES Type = 3;
	required int32 power = 4;
	required int32 pp = 5;
	required int32 accuracy = 6;
	required int32 priority = 7;
	required int32 target_ID = 8;
	required string description = 9;
}
message MOVE_ENTRY{
	required int32 mid = 1;
	required MOVE_METHODS method = 2;
	required int32 level = 3;
}

/* I <3 Enumerations */

enum ERROR_TYPES {
	INTERNAL_SERVER_ERROR = 0;
	UNKNOWN_ERROR = 1;
    LOGIN_INCORRECT = 2;
   	USER_BANNED = 3;
	UNKNOWN_USER = 4;
	UNKNOWN_POKEMON = 6;
	MISSING_ARGUMENT = 7;
	INVALID_ARGUMENT = 8;
	ACCESS_DENIED = 9;
	TIMEOUT = 10;
	NO_SPAWN_RESOLUTION = 11;
  }
    enum CHAT_TYPES {
	PUBLIC = 0;
	SHOUT = 1;
	PRIVATE = 2;
  }
  enum POKEMON_TYPES {
	PUBLIC = 0;
	SHOUT = 1;
	PRIVATE = 2;
  }
  enum MOVE_METHODS {
	PUBLIC = 0;
	SHOUT = 1;
	PRIVATE = 2;
  }

